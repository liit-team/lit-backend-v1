generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  /// 유저 ID
  id           BigInt    @id @default(autoincrement())
  /// 전화번호
  phone        String    @db.VarChar(15) @unique
  /// 이름
  userName     String    @db.VarChar(10)
  /// 별명
  userTitle    String    @db.VarChar(10)
  /// 프로필 사진 경로 (S3)
  userPicPath  String?   @db.VarChar(255)
  /// 생성 일자
  createdAt    DateTime  @default(now()) @map("created_at")
  /// 업데이트 일자
  updatedAt    DateTime?  @updatedAt

  /// Posts와 다대다 관계 (태그)
  taggedPosts  PostTags[] @relation("UserTaggedPosts")
  // Heart 와 1:N 관계 
  hearts       Heart[]   @relation("UserHeart")
  // 내가 찍은 사진들
  takenPhotos  Posts[]     @relation("TakenPhotos")
  // 내가 한 리액션들
  reacts       React[]     @relation("UserReacts")
}

enum PostStatus {
  PUBLIC 
  HIDDEN
  FILTERD // 삭제
}

model Posts {
  /// 게시물 ID
  id         BigInt    @id @default(autoincrement())
  /// 사진 S3 경로
  picPath    String    @db.VarChar(255)
  /// 설명 (bio)
  bio        String    @db.VarChar(50)
  // 게시글 상태 (FILTERD=필터링 됨)
  status     PostStatus 
  /// Users와 다대다 관계 (태그)
  tags       PostTags[] @relation("PostTaggedUsers")
  /// React와 1:N 관계
  reacts     React[]   @relation("PostReacts")
  // Heart 와 1:N 관계 
  hearts     Heart[]   @relation("PostHearts")
  /// 사진 찍은 사람
  takenBy    Users     @relation("TakenPhotos", fields: [takenById], references: [id], onDelete: Cascade)
  /// 사진 찍은 사람 ID
  takenById  BigInt 
  /// 생성 일자
  createdAt  DateTime  @default(now())
  /// 업데이트 일자
  updatedAt  DateTime?  @updatedAt 
}

model PostTags {
  /// 게시물 ID
  postId     BigInt    @map("post_id")
  /// 유저 ID
  userId     BigInt    @map("user_id")

  post       Posts     @relation("PostTaggedUsers", fields: [postId], references: [id], onDelete: Cascade)
  user       Users     @relation("UserTaggedPosts", fields: [userId], references: [id], onDelete: Cascade)

  /// 복합 키
  @@id([postId, userId])
  /// 생성 일자
  createdAt  DateTime @default(now())
}

model React {
  /// 리액션 ID
  id         BigInt    @id @default(autoincrement())
  /// 게시물 ID
  postId     BigInt 
  // 유저 ID 
  userId     BigInt
  /// 리액션 (이모지)
  content    String    @db.VarChar(1)
  /// 생성 일자
  createdAt  DateTime @default(now())

  /// 게시물 관계
  user       Users     @relation("UserReacts", fields: [userId], references: [id], onDelete: Cascade)
  post       Posts     @relation("PostReacts", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Heart {
  // 고유 ID 
  id         BigInt    @id @default(autoincrement())
  /// 생성 일자
  createdAt  DateTime  @default(now())

  // 게시물 ID 
  postId     BigInt 
  // 유저 ID 
  userId     BigInt 

  user       Users     @relation("UserHeart", fields: [userId], references: [id], onDelete: Cascade)
  post       Posts     @relation("PostHearts", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}